<?php

namespace ccxt\async;

// PLEASE DO NOT EDIT THIS FILE, IT IS GENERATED AND WILL BE OVERWRITTEN:
// https://github.com/ccxt/ccxt/blob/master/CONTRIBUTING.md#how-to-contribute-code

use Exception; // a common import
use ccxt\async\abstract\protondex as Exchange;
use ccxt\ExchangeError;
use ccxt\ArgumentsRequired;
use ccxt\InsufficientFunds;
use ccxt\OrderNotFound;
use ccxt\Precise;
use React\Async;

class protondex extends Exchange {

    public function describe() {
        return $this->deep_extend(parent::describe(), array(
            'id' => 'protondex',
            'name' => 'protondex',
            'countries' => array( 'US' ),
            'rateLimit' => 600,
            'version' => 'v1',
            'has' => array(
                'CORS' => null,
                'spot' => true,
                'margin' => false,
                'swap' => false,
                'future' => false,
                'option' => false,
                'addMargin' => false,
                'cancelOrder' => true,
                'createOrder' => true,
                'createReduceOnlyOrder' => false,
                'createStopLimitOrder' => false,
                'createStopMarketOrder' => false,
                'createStopOrder' => false,
                'fetchBalance' => true,
                'fetchBorrowRate' => false,
                'fetchBorrowRateHistories' => false,
                'fetchBorrowRateHistory' => false,
                'fetchBorrowRates' => false,
                'fetchBorrowRatesPerSymbol' => false,
                'fetchCurrencies' => false,
                'fetchDepositAddress' => false,
                'fetchDepositAddresses' => false,
                'fetchDeposits' => true,
                'fetchFundingHistory' => false,
                'fetchFundingRate' => false,
                'fetchFundingRateHistory' => false,
                'fetchFundingRates' => false,
                'fetchIndexOHLCV' => false,
                'fetchL2OrderBook' => false,
                'fetchLeverage' => false,
                'fetchLeverageTiers' => false,
                'fetchMarginMode' => false,
                'fetchMarkets' => true,
                'fetchMarkOHLCV' => false,
                'fetchMyTrades' => true,
                'fetchOHLCV' => true,
                'fetchOpenInterestHistory' => false,
                'fetchOpenOrders' => true,
                'fetchOrder' => true,
                'fetchOrderBook' => true,
                'fetchOrders' => true,
                'fetchPosition' => false,
                'fetchPositionMode' => false,
                'fetchPositions' => false,
                'fetchPositionsRisk' => false,
                'fetchPremiumIndexOHLCV' => false,
                'fetchTicker' => true,
                'fetchTickers' => true,
                'fetchTrades' => true,
                'fetchTradinFee' => false,
                'fetchTradingFees' => true,
                'fetchTransfer' => false,
                'fetchTransfers' => false,
                'fetchWithdrawals' => false,
                'reduceMargin' => false,
                'setLeverage' => false,
                'setMarginMode' => false,
                'setPositionMode' => false,
                'transfer' => false,
                'withdraw' => false,
            ),
            'hostname' => 'https://mainnet.api.protondex.com',
            'urls' => array(
                'logo' => 'https://protonswap.com/img/logo.svg',
                'api' => array(
                    'rest' => 'https://mainnet.api.protondex.com/dex',
                    'public' => 'https://mainnet.api.protondex.com/dex',
                    'private' => 'https://mainnet.api.protondex.com/dex',
                ),
                'test' => array(
                    'rest' => 'https://testnet.api.protondex.com/dex',
                    'public' => 'https://testnet.api.protondex.com/dex',
                    'private' => 'https://testnet.api.protondex.com/dex',
                ),
                'www' => 'https://protondex.com/',
                'doc' => array(
                    'https://www.docs.protondex.com',
                ),
                'fees' => array(
                    'https://www.docs.protondex.com/dex/what-is-proton-dex/dex-fees-and-discounts',
                ),
                'referral' => 'https://protondex.com/',
            ),
            'api' => array(
                'public' => array(
                    'get' => array(
                        'markets/all',
                        'orders/open', // ?{account}/{marketid}/{offset}/{limit}'
                        'orders/history', // ?{account}/{marketid}/{offset}/{limit}'
                        'orders/lifecycle', // ?{orderid}'
                        'orders/depth', // ?{marketid}/{step}/{limit}'
                        'trades/daily',
                        'trades/history', // ?{account}/{symbol}/{offset}/{ordinal_order_ids}/{limit}'
                        'trades/recent', // ?{marketid}/{offset}/{limit}'
                        'chart/ohlcv', // ?{interval}/{dateFrom}/{dateTo}/{marketid}/{limit}'
                        'status/sync',
                        'account/balances', // ?{account}'
                    ),
                    'post' => array(
                        'orders/serialize', // application/json - transaction
                        'orders/submit', // application/json - serilized_tx_hex, signatures
                    ),
                ),
                'private' => array(
                    'post' => array(
                    ),
                    'get' => array(
                        'user/fees',
                        'account/deposits',
                        'account/withdrawals',
                    ),
                ),
            ),
            'fees' => array(
                'trading' => array(
                    'tierBased' => true,
                    'maker' => 0.001, // tiered fee discounts
                    'taker' => 0.001, // tiered fee discounts
                ),
            ),
            'precision' => array(
                'amount' => $this->parse_number('0.00000001'),
                'price' => $this->parse_number('0.00000001'),
            ),
            'precisionMode' => TICK_SIZE,
        ));
    }

    public function fetch_markets($params = array ()) {
        return Async\async(function () use ($params) {
            /**
             * retrieves data on all $markets for protondex
             * @param {array} $params extra parameters specific to the exchange api endpoint
             * @return {[array]} an array of objects representing $market data
             */
            $response = Async\await($this->publicGetMarketsAll ($params));
            //
            //    {
            //        "data" => array(
            //            array(
            //                "name" => "ETH-BTC",
            //                "precision" => 6,
            //                "min_volume" => "0.00000001",
            //                "min_price" => "0.000001",
            //                "volume" => "0.015713",
            //                "last_price" => "0.069322",
            //                "highest_bid" => "0.063892",
            //                "lowest_ask" => "0.071437",
            //                "change_in_24h" => "2.85",
            //                "size_precision" => 8,
            //                "price_precision" => 6
            //            ),
            //            ...
            //        )
            //    }
            //
            $markets = $this->safe_value($response, 'data', array());
            $result = array();
            for ($i = 0; $i < count($markets); $i++) {
                $market = $markets[$i];
                list($baseId, $quoteId) = explode('_', $market['symbol']);
                $base = $this->safe_currency_code($baseId);
                $quote = $this->safe_currency_code($quoteId);
                $result[] = array(
                    'id' => $market['symbol'],
                    'symbol' => $market['symbol'],
                    'base' => $base,
                    'quote' => $quote,
                    'settle' => null,
                    'baseId' => $baseId,
                    'quoteId' => $quoteId,
                    'settleId' => null,
                    'type' => 'spot',
                    'spot' => true,
                    'margin' => false,
                    'swap' => false,
                    'future' => false,
                    'option' => false,
                    'active' => true,
                    'contract' => false,
                    'linear' => null,
                    'inverse' => null,
                    'contractSize' => null,
                    'expiry' => null,
                    'expiryDatetime' => null,
                    'strike' => null,
                    'optionType' => null,
                    'precision' => array(
                        'amount' => $this->parse_number($this->parse_precision($this->safe_string($market, 'size_precision'))),
                        'price' => $this->parse_number($this->parse_precision($this->safe_string($market, 'price_precision'))),
                    ),
                    'limits' => array(
                        'leverage' => array(
                            'min' => null,
                            'max' => null,
                        ),
                        'amount' => array(
                            'min' => $this->safe_number($market, 'minPrice'),
                            'max' => null,
                        ),
                        'price' => array(
                            'min' => $this->safe_number($market, 'minVolume'),
                            'max' => null,
                        ),
                        'cost' => array(
                            'min' => null,
                            'max' => null,
                        ),
                    ),
                    'info' => $market,
                );
            }
            return $result;
        }) ();
    }

    public function parse_ticker($ticker, $market = null) {
        //
        //     {
        //         "name":"ETH-BTC",
        //         "precision":6,
        //         "min_volume":"0.00000001",
        //         "min_price":"0.000001",
        //         "volume":"0.000452",
        //         "last_price":"0.079059",
        //         "highest_bid":"0.073472",
        //         "lowest_ask":"0.079059",
        //         "change_in_24h":"8.9",
        //         "size_precision":8,
        //         "price_precision":6
        //     }
        //
        $marketId = $this->safe_string($ticker, 'name');
        $market = $this->safe_market($marketId, $market, '-');
        $timestamp = $this->milliseconds();
        $last = $this->safe_string($ticker, 'last_price');
        return $this->safe_ticker(array(
            'symbol' => $ticker['symbol'],
            'timestamp' => $timestamp,
            'datetime' => $this->iso8601($timestamp),
            'high' => $this->safe_string($ticker, 'high'),
            'low' => $this->safe_string($ticker, 'low'),
            'bid' => $this->safe_string($ticker, 'highest_bid'),
            'bidVolume' => $this->safe_string($ticker, 'volume_bid'),
            'ask' => $this->safe_string($ticker, 'lowest_ask'),
            'askVolume' => $this->safe_string($ticker, 'volume_ask'),
            'vwap' => null,
            'open' => $this->safe_string($ticker, 'open'),
            'close' => $this->safe_string($ticker, 'close'),
            'last' => $last,
            'previousClose' => null,
            'change' => null,
            'percentage' => $this->safe_string($ticker, 'change_percentage'),
            'average' => null,
            'baseVolume' => null,
            'quoteVolume' => $this->safe_string($ticker, 'volume'),
            'info' => $ticker,
        ), $market);
    }

    public function fetch_ticker($symbol, $params = array ()) {
        return Async\async(function () use ($symbol, $params) {
            /**
             * fetches a price ticker, a statistical calculation with the information calculated over the past 24 hours for a specific market
             * @param {string} $symbol unified $symbol of the market to fetch the ticker for
             * @param {array} $params extra parameters specific to the protondex api endpoint
             * @return {array} a {@link https://docs.ccxt.com/en/latest/manual.html#ticker-structure ticker structure}
             */
            Async\await($this->load_markets());
            $tickers = Async\await($this->fetch_tickers());
            return $tickers[$symbol];
        }) ();
    }

    public function fetch_tickers($symbols = null, $params = array ()) {
        return Async\async(function () use ($symbols, $params) {
            /**
             * fetches price $tickers for multiple markets, statistical calculations with the information calculated over the past 24 hours each market
             * @param {[string]|null} $symbols unified $symbols of the markets to fetch the $ticker for, all market $tickers are returned if not assigned
             * @param {array} $params extra parameters specific to the protondex api endpoint
             * @return {array} an array of {@link https://docs.ccxt.com/en/latest/manual.html#$ticker-structure $ticker structures}
             */
            Async\await($this->load_markets());
            $symbols = $this->market_symbols($symbols);
            $response = Async\await($this->publicGetTradesDaily ($params));
            //
            //     {
            //         "data":array(
            //             {
            //                 "name":"ETH-BTC",
            //                 "precision":6,
            //                 "min_volume":"0.00000001",
            //                 "min_price":"0.000001",
            //                 "volume":"0.000452",
            //                 "last_price":"0.079059",
            //                 "highest_bid":"0.073472",
            //                 "lowest_ask":"0.079059",
            //                 "change_in_24h":"8.9",
            //                 "size_precision":8,
            //                 "price_precision":6
            //             }
            //         )
            //     }
            //
            $tickers = $this->safe_value($response, 'data', array());
            $result = array();
            for ($i = 0; $i < count($tickers); $i++) {
                $ticker = $this->parse_ticker($tickers[$i]);
                $symbol = $ticker['symbol'];
                $result[$symbol] = $ticker;
            }
            return $this->filter_by_array($result, 'symbol', $symbols);
        }) ();
    }

    public function fetch_order_book($symbol, $limit = null, $params = array ()) {
        return Async\async(function () use ($symbol, $limit, $params) {
            /**
             * fetches information on open orders with bid (buy) and ask (sell) prices, volumes and other $data
             * @param {string} $symbol unified $symbol of the $market to fetch the order book for
             * @param {int|null} $limit the maximum amount of order book entries to return
             * @param {array} $params extra parameters specific to the protondex api endpoint
             * @return {array} A dictionary of {@link https://docs.ccxt.com/en/latest/manual.html#order-book-structure order book structures} indexed by $market symbols
             */
            Async\await($this->load_markets());
            $market = $this->market($symbol);
            $request = array(
                'symbol' => $market['symbol'],
            );
            $request['limit'] = ($limit !== null) ? $limit : 100;
            $request['step'] = ($params['step'] !== null) ? $params['step'] : 100;
            $response = Async\await($this->publicGetOrdersDepth (array_merge($request, $params)));
            $data = $this->safe_value($response, 'data', array());
            return $this->parse_order_book($data, $market['symbol'], null, 'bids', 'asks', 'bid', 'ask');
        }) ();
    }

    public function parse_trade($trade, $market = null) {
        //
        // fetchTrades (public)
        //
        //      {
        //          "id":"5ec36295-5c8d-4874-8d66-2609d4938557",
        //          "price":"4050.06","size":"0.0044",
        //          "market_name":"ETH-USDT",
        //          "side":"sell",
        //          "created_at":"2021-12-07T17:47:36.811000Z"
        //      }
        //
        // fetchMyTrades (private)
        //
        //      {
        //              "id" => "0718d520-c796-4061-a16b-915cd13f20c6",
        //              "price" => "0.00000358",
        //              "size" => "50.0",
        //              "market_name" => "DOGE-BTC",
        //              "order_id" => "ff2616d8-58d4-40fd-87ae-937c73eb6f1c",
        //              "side" => "buy",
        //              "fee' => "0.00000036",
        //              "fee_currency_code" => "btc",
        //              "liquidity" => "T",
        //              "created_at" => "2021-12-08T18:26:33.840000Z"
        //      }
        //
        $timestamp = $this->parse8601($this->safe_string($trade, 'block_time'));
        $tradeId = $this->safe_string($trade, 'trade_id');
        $priceString = $this->safe_string($trade, 'price');
        $orderSide = $this->safe_string($trade, 'order_side');
        $account = $this->safe_string($trade, 'account');
        $amountString = $account === $this->safe_string($trade, 'bid_user') ? $this->safe_string($trade, 'bid_amount') : $this->safe_string($trade, 'ask_amount');
        $orderId = $account === $this->safe_string($trade, 'bid_user') ? $this->safe_string($trade, 'bid_user_order_id') : $this->safe_string($trade, 'ask_user_order_id');
        $feeString = $account === $this->safe_string($trade, 'bid_user') ? $this->safe_string($trade, 'bid_fee') : $this->safe_string($trade, 'ask_fee');
        $feeCurrencyId = $account === $this->safe_string($trade, 'bid_user') ? $this->safe_string($market, 'baseId') : $this->safe_string($market, 'quoteId');
        $fee = null;
        if ($feeString !== null) {
            $feeCurrencyCode = $this->safe_currency_code($feeCurrencyId);
            $fee = array(
                'cost' => $feeString,
                'currency' => $feeCurrencyCode,
            );
        }
        return $this->safe_trade(array(
            'info' => $trade,
            'id' => $tradeId,
            'timestamp' => $timestamp,
            'datetime' => $this->iso8601($timestamp),
            'symbol' => $market['symbol'],
            'order' => $orderId,
            'type' => null,
            'side' => $orderSide,
            'takerOrMaker' => null,
            'price' => $priceString,
            'amount' => $amountString,
            'cost' => null,
            'fee' => $fee,
        ), $market);
    }

    public function parse_trades($trades, ?array $market = null, ?int $since = null, ?int $limit = null, $params = array ()) {
        $trades = $this->to_array($trades);
        $result = array();
        for ($i = 0; $i < count($trades); $i++) {
            $trades[$i]['account'] = $params['account'];
            $trade = array_merge($this->parse_trade($trades[$i], $market));
            $result[] = $trade;
        }
        return $result;
    }

    public function fetch_my_trades(?string $symbol = null, ?int $since = null, ?int $limit = null, $params = array ()) {
        return Async\async(function () use ($symbol, $since, $limit, $params) {
            /**
             * fetch all trades made by the user
             * @param {string|null} $symbol unified $market $symbol
             * @param {int|null} $since the earliest time in ms to fetch trades for
             * @param {int|null} $limit the maximum number of trades structures to retrieve
             * @param {array} $params extra parameters specific to the protondex api endpoint
             * @return {[array]} a list of ~@link https://docs.ccxt.com/#/?id=trade-structure trade structures~
             */
            Async\await($this->load_markets());
            $market = $this->market($symbol);
            if ($params['account'] === null) {
                throw new ArgumentsRequired($this->id . ' fetchMyTrades() requires a account argument in params');
            }
            $request = array(
                'account' => $params['account'],
                'symbol' => $market['symbol'],
            );
            $request['limit'] = ($limit !== null) ? $limit : 100;
            $request['offset'] = ($params['offset'] !== null) ? $params['offset'] : 0;
            if ($params['ordinal_order_ids'] !== null) {
                $request['ordinal_order_ids'] = $params['ordinal_order_ids'];
            }
            $response = Async\await($this->publicGetTradesHistory (array_merge($request, $params)));
            //
            //     array(
            //         {
            //             "id" => "32164924331503616",
            //             "symbol" => "LINK_USDT",
            //             "accountType" => "SPOT",
            //             "orderId" => "32164923987566592",
            //             "side" => "SELL",
            //             "type" => "MARKET",
            //             "matchRole" => "TAKER",
            //             "createTime" => 1648635115525,
            //             "price" => "11",
            //             "quantity" => "0.5",
            //             "amount" => "5.5",
            //             "feeCurrency" => "USDT",
            //             "feeAmount" => "0.007975",
            //             "pageId" => "32164924331503616",
            //             "clientOrderId" => "myOwnId-321"
            //         }
            //     )
            //
            $data = $this->safe_value($response, 'data', array());
            return $this->parse_trades($data, $market, 1, 1, array( 'account' => $params['account'] ));
        }) ();
    }

    public function fetch_orders(?string $symbol = null, ?int $since = null, ?int $limit = null, $params = array ()) {
        return Async\async(function () use ($symbol, $since, $limit, $params) {
            /**
             * get the list of most recent trades for a particular $symbol
             * @param {string} $symbol unified $symbol of the $market to fetch trades for
             * @param {int|null} $since timestamp in ms of the earliest trade to fetch
             * @param {int|null} $limit the maximum amount of trades to fetch
             * @param {array} $params extra parameters specific to the protondex api endpoint
             * @return {[array]} a list of ~@link https://docs.ccxt.com/en/latest/manual.html?#public-trades trade structures~
             */
            Async\await($this->load_markets());
            $market = $this->market($symbol);
            if ($params['account'] === null) {
                throw new ArgumentsRequired($this->id . ' fetchOrders() requires a account argument in params');
            }
            $request = array(
                'account' => $params['account'],
                'symbol' => $market['symbol'],
            );
            $request['offset'] = ($params['offset'] !== null) ? $params['offset'] : 0;
            $request['limit'] = ($limit !== null) ? $limit : 100;
            if ($params['ordinal_order_ids'] !== null) {
                $request['ordinal_order_ids'] = $params['ordinal_order_ids'];
            }
            if ($params['trx_id'] !== null) {
                $request['trx_id'] = $params['trx_id'];
            }
            if ($params['status'] !== null) {
                $request['status'] = $params['status'];
            }
            $response = Async\await($this->publicGetOrdersHistory (array_merge($request, $params)));
            //
            //      {
            //          "data":array(
            //              array(
            //                  "id":"5ec36295-5c8d-4874-8d66-2609d4938557",
            //                  "price":"4050.06","size":"0.0044",
            //                  "market_name":"ETH-USDT",
            //                  "side":"sell",
            //                  "created_at":"2021-12-07T17:47:36.811000Z"
            //              ),
            //          )
            //      }
            //
            $data = $this->safe_value($response, 'data', array());
            return $this->parse_orders($data, $market);
        }) ();
    }

    public function fetch_trades(string $symbol, ?int $since = null, ?int $limit = null, $params = array ()) {
        return Async\async(function () use ($symbol, $since, $limit, $params) {
            /**
             * get the list of most recent trades for a particular $symbol
             * @param {string} $symbol unified $symbol of the $market to fetch trades for
             * @param {int|null} $since timestamp in ms of the earliest trade to fetch
             * @param {int|null} $limit the maximum amount of trades to fetch
             * @param {array} $params extra parameters specific to the protondex api endpoint
             * @return {[array]} a list of ~@link https://docs.ccxt.com/en/latest/manual.html?#public-trades trade structures~
             */
            Async\await($this->load_markets());
            $market = $this->market($symbol);
            $request = array(
                'symbol' => $market['symbol'],
            );
            $request['limit'] = ($limit !== null) ? $limit : 100;
            $request['offset'] = ($params['offset'] !== null) ? $params['offset'] : 0;
            $response = Async\await($this->publicGetTradesRecent (array_merge($request, $params)));
            //
            //      {
            //          "data" => array(
            //              array(
            //                  "id" => "0718d520-c796-4061-a16b-915cd13f20c6",
            //                  "price" => "0.00000358",
            //                  "size" => "50.0",
            //                  "market_name" => "DOGE-BTC",
            //                  "order_id" => "ff2616d8-58d4-40fd-87ae-937c73eb6f1c",
            //                  "side" => "buy",
            //                  "fee' => "0.00000036",
            //                  "fee_currency_code" => "btc",
            //                  "liquidity" => "T",
            //                  "created_at" => "2021-12-08T18:26:33.840000Z"
            //              ),
            //          )
            //      }
            //
            $data = $this->safe_value($response, 'data', array());
            return $this->parse_trades($data, $market, 1, 1);
        }) ();
    }

    public function fetch_trading_fees($params = array ()) {
        return Async\async(function () use ($params) {
            /**
             * fetch the trading fees for multiple markets
             * @param {array} $params extra parameters specific to the protondex api endpoint
             * @return {array} a dictionary of {@link https://docs.ccxt.com/en/latest/manual.html#fee-structure fee structures} indexed by market symbols
             */
            Async\await($this->load_markets());
            $response = Async\await($this->privateGetUserFees ($params));
            //
            //    {
            //        $data => {
            //            maker_fee => '0.0',
            //            taker_fee => '0.2',
            //            btc_volume_30d => '0.0'
            //        }
            //    }
            //
            $data = $this->safe_value($response, 'data', array());
            $makerString = $this->safe_string($data, 'maker_fee');
            $takerString = $this->safe_string($data, 'taker_fee');
            $maker = $this->parse_number(Precise::string_div($makerString, '100'));
            $taker = $this->parse_number(Precise::string_div($takerString, '100'));
            $result = array();
            for ($i = 0; $i < count($this->symbols); $i++) {
                $symbol = $this->symbols[$i];
                $result[$symbol] = array(
                    'info' => $response,
                    'symbol' => $symbol,
                    'maker' => $maker,
                    'taker' => $taker,
                    'percentage' => true,
                    'tierBased' => true,
                );
            }
            return $result;
        }) ();
    }

    public function parse_balance($response) {
        $result = array( 'info' => $response );
        $balances = $this->safe_value($response, 'data', array());
        for ($i = 0; $i < count($balances); $i++) {
            $balance = $balances[$i];
            $currencyId = $this->safe_string($balance, 'currency');
            $code = $this->safe_currency_code($currencyId);
            $account = $this->account();
            $account['token'] = $this->safe_string($balance, 'contract');
            $account['free'] = $this->safe_string($balance, 'amount');
            $account['total'] = $this->safe_string($balance, 'amount');
            $result[$code] = $account;
        }
        return $this->safe_balance($result);
    }

    public function fetch_balance($params = array ()) {
        return Async\async(function () use ($params) {
            /**
             * query for balance and get the amount of funds available for trading or funds locked in orders
             * @param {array} $params extra parameters specific to the protondex api endpoint
             * @return {array} a ~@link https://docs.ccxt.com/en/latest/manual.html?#balance-structure balance structure~
             */
            Async\await($this->load_markets());
            if ($params['account'] === null) {
                throw new ArgumentsRequired($this->id . ' fetchOrders() requires a account argument in params');
            }
            $request = array(
                'account' => $params['account'],
            );
            $response = Async\await($this->publicGetAccountBalances (array_merge($request, $params)));
            return $this->parse_balance($response);
        }) ();
    }

    public function parse_deposit_address($depositAddress, $currency = null) {
        //
        //     {
        //         "address":"0x77b5051f97efa9cc52c9ad5b023a53fc15c200d3",
        //         "tag":"0"
        //     }
        //
        $address = $this->safe_string($depositAddress, 'address');
        $tag = $this->safe_string($depositAddress, 'tag');
        $this->check_address($address);
        return array(
            'currency' => $this->safe_currency_code(null, $currency),
            'address' => $address,
            'tag' => $tag,
            'network' => null,
            'info' => $depositAddress,
        );
    }

    public function parse_order_status($status) {
        $statuses = array(
            'fulfilled' => 'closed',
            'canceled' => 'canceled',
            'pending' => 'open',
            'open' => 'open',
            'partially_filled' => 'open',
        );
        return $this->safe_string($statuses, $status, $status);
    }

    public function parse_order($order, $market = null) {
        //
        //     {
        //         "id":"8bdd79f4-8414-40a2-90c3-e9f4d6d1eef4"
        //         "market":"IOT-BTC"
        //         "price":"0.0000003"
        //         "size":"4.0"
        //         "size_filled":"3.0"
        //         "fee":"0.0075"
        //         "fee_currency_code":"iot"
        //         "funds":"0.0"
        //         "status":"canceled"
        //         "order_type":"buy"
        //         "post_only":false
        //         "operation_type":"market_order"
        //         "created_at":"2018-01-12T21:14:06.747828Z"
        //     }
        //
        $marketId = $this->safe_string($order, 'market');
        $symbol = $this->safe_symbol($marketId, $market, '-');
        $timestamp = $this->parse8601($this->safe_string($order, 'block_time'));
        $priceString = $this->safe_string($order, 'price');
        $amountString = $this->safe_string($order, 'quantity_init');
        $remainingString = $this->safe_string($order, 'quantity_curr');
        $status = $this->parse_order_status($this->safe_string($order, 'status'));
        $type = $this->safe_string($order, 'order_type');
        if ($type !== null) {
            $parts = explode('_', $type);
            $type = $parts[0];
        }
        $side = $this->safe_string($order, 'order_side');
        return $this->safe_order(array(
            'id' => $this->safe_string($order, 'order_id'),
            'clientOrderId' => $this->safe_string($order, 'ordinal_order_id'),
            'datetime' => $this->iso8601($timestamp),
            'timestamp' => $timestamp,
            'status' => $status,
            'symbol' => $symbol,
            'type' => $type,
            'side' => $side,
            'price' => $priceString,
            'stopPrice' => $this->safe_string($order, 'trigger_price'),
            'cost' => null,
            'amount' => $amountString,
            'remaining' => $remainingString,
            'fee' => null,
        ), $market);
    }

    public function fetch_order($id, $symbol = null, $params = array ()) {
        return Async\async(function () use ($id, $symbol, $params) {
            /**
             * fetches information on an order made by the user
             * @param {string|null} $symbol unified $symbol of the market the order was made in
             * @param {array} $params extra parameters specific to the protondex api endpoint
             * @return {array} An {@link https://docs.ccxt.com/en/latest/manual.html#order-structure order structure}
             */
            Async\await($this->load_markets());
            $request = array(
                'order_id' => $id,
            );
            if ($params['ordinal_order_id'] !== null) {
                $request['ordinal_order_id'] = $params['ordinal_order_id'];
            }
            $response = Async\await($this->publicGetOrdersLifecycle (array_merge($request, $params)));
            $data = $this->safe_value($response, 'data', array());
            return $this->parse_order($data[0]);
        }) ();
    }

    public function fetch_open_orders(?string $symbol = null, ?int $since = null, ?int $limit = null, $params = array ()) {
        return Async\async(function () use ($symbol, $since, $limit, $params) {
            /**
             * fetch all unfilled currently open orders
             * fetch all unfilled currently open orders
             * @param {string|null} $symbol unified $market $symbol
             * @param {int|null} $since the earliest time in ms to fetch open orders for
             * @param {int|null} $limit the maximum number of  open orders structures to retrieve
             * @param {array} $params extra parameters specific to the protondex api endpoint
             * @return {[array]} a list of {@link https://docs.ccxt.com/en/latest/manual.html#order-structure order structures}
             */
            Async\await($this->load_markets());
            $market = $this->market($symbol);
            if ($params['account'] === null) {
                throw new ArgumentsRequired($this->id . ' fetchOrders() requires a account argument in params');
            }
            $request = array(
                'account' => $params['account'],
                'symbol' => $market['symbol'],
            );
            $request['offset'] = ($params['offset'] !== null) ? $params['offset'] : 0;
            $request['limit'] = ($limit !== null) ? $limit : 100;
            if ($params['ordinal_order_ids'] !== null) {
                $request['ordinal_order_ids'] = $params['ordinal_order_ids'];
            }
            $response = Async\await($this->publicGetOrdersOpen (array_merge($request, $params)));
            $data = $this->safe_value($response, 'data', array());
            return $this->parse_orders($data, $market);
        }) ();
    }

    public function fetch_deposits($code = null, $since = null, $limit = null, $params = array ()) {
        return Async\async(function () use ($code, $since, $limit, $params) {
            /**
             * fetch all deposits made to an account
             * @param {string|null} $code unified $currency $code
             * @param {int|null} $since the earliest time in ms to fetch deposits for
             * @param {int|null} $limit the maximum number of deposits structures to retrieve
             * @param {array} $params extra parameters specific to the protondex api endpoint
             * @return {[array]} a list of {@link https://docs.ccxt.com/en/latest/manual.html#transaction-structure transaction structures}
             */
            Async\await($this->load_markets());
            $request = array(
                // $currency => 'xrp', // optional => $currency $code in lowercase
                // status => 'completed', // optional => withdrawal status
                // since_time // datetime in ISO8601 format (2017-11-06T09:53:08.383210Z)
                // end_time // datetime in ISO8601 format (2017-11-06T09:53:08.383210Z)
                // start_time // datetime in ISO8601 format (2017-11-06T09:53:08.383210Z)
            );
            $currency = null;
            if ($code !== null) {
                $currency = $this->currency($code);
                $request['currency'] = $this->safe_string_lower($currency, 'id');
            }
            if ($since !== null) {
                $request['since_time'] = $this->iso8601($since);
            }
            $response = Async\await($this->privateGetAccountDeposits (array_merge($request, $params)));
            //
            //     data => array(
            //         array(
            //             id => '6e2f18b5-f80e-xxx-xxx-xxx',
            //             amount => '0.1',
            //             status => 'completed',
            //             currency_code => 'eth',
            //             txid => '0xxxx',
            //             address => '0xxxx',
            //             tag => null,
            //             type => 'deposit'
            //         ),
            //     )
            //
            $transactions = $this->safe_value($response, 'data', array());
            $transactions->reverse (); // no timestamp but in reversed order
            return $this->parse_transactions($transactions, $currency, null, $limit);
        }) ();
    }

    public function fetch_withdrawals($code = null, $since = null, $limit = null, $params = array ()) {
        return Async\async(function () use ($code, $since, $limit, $params) {
            /**
             * fetch all withdrawals made from an account
             * @param {string|null} $code unified $currency $code
             * @param {int|null} $since the earliest time in ms to fetch withdrawals for
             * @param {int|null} $limit the maximum number of withdrawals structures to retrieve
             * @param {array} $params extra parameters specific to the protondex api endpoint
             * @return {[array]} a list of {@link https://docs.ccxt.com/en/latest/manual.html#transaction-structure transaction structures}
             */
            Async\await($this->load_markets());
            $request = array(
                // $currency => 'xrp', // optional => $currency $code in lowercase
                // status => 'completed', // optional => withdrawal status
                // since_time // datetime in ISO8601 format (2017-11-06T09:53:08.383210Z)
                // end_time // datetime in ISO8601 format (2017-11-06T09:53:08.383210Z)
                // start_time // datetime in ISO8601 format (2017-11-06T09:53:08.383210Z)
            );
            $currency = null;
            if ($code !== null) {
                $currency = $this->currency($code);
                $request['currency'] = $this->safe_string_lower($currency, 'id');
            }
            if ($since !== null) {
                $request['since_time'] = $this->iso8601($since);
            }
            $response = Async\await($this->privateGetAccountWithdrawals (array_merge($request, $params)));
            //
            //     data => array(
            //         array(
            //             id => '25f6f144-3666-xxx-xxx-xxx',
            //             amount => '0.01',
            //             status => 'completed',
            //             fee => '0.0005',
            //             currency_code => 'btc',
            //             txid => '4xxx',
            //             address => 'bc1xxx',
            //             tag => null,
            //             type => 'withdraw'
            //         ),
            //     )
            //
            $transactions = $this->safe_value($response, 'data', array());
            $transactions->reverse (); // no timestamp but in reversed order
            return $this->parse_transactions($transactions, $currency, null, $limit);
        }) ();
    }

    public function parse_transaction_status($status) {
        $statuses = array(
            'completed' => 'ok',
            'denied' => 'failed',
            'approval_pending' => 'pending',
        );
        return $this->safe_string($statuses, $status, $status);
    }

    public function parse_transaction($transaction, $currency = null) {
        //
        // fetchWithdrawals, withdraw
        //
        //     array(
        //         $id => '25f6f144-3666-xxx-xxx-xxx',
        //         $amount => '0.01',
        //         $status => 'completed',
        //         fee => '0.0005',
        //         currency_code => 'btc',
        //         $txid => '4xxx',
        //         $address => 'bc1xxx',
        //         $tag => null,
        //         $type => 'withdraw'
        //     ),
        //
        // fetchDeposits
        //
        //     array(
        //         $id => '6e2f18b5-f80e-xxx-xxx-xxx',
        //         $amount => '0.1',
        //         $status => 'completed',
        //         currency_code => 'eth',
        //         $txid => '0xxxx',
        //         $address => '0xxxx',
        //         $tag => null,
        //         $type => 'deposit'
        //     ),
        //
        $id = $this->safe_string($transaction, 'id');
        $address = $this->safe_string($transaction, 'address');
        $tag = $this->safe_string($transaction, 'tag');
        $txid = $this->safe_string($transaction, 'txid');
        $currencyId = $this->safe_string($transaction, 'currency_code');
        $code = $this->safe_currency_code($currencyId, $currency);
        $type = $this->safe_string($transaction, 'type');
        if ($type === 'withdraw') {
            $type = 'withdrawal';
        }
        $status = $this->parse_transaction_status($this->safe_string($transaction, 'status'));
        $amountString = $this->safe_string($transaction, 'amount');
        $amount = $this->parse_number($amountString);
        $feeCostString = $this->safe_string($transaction, 'fee');
        $feeCost = 0;
        if ($feeCostString !== null) {
            $feeCost = $this->parse_number($feeCostString);
        }
        return array(
            'info' => $transaction,
            'id' => $id,
            'txid' => $txid,
            'timestamp' => null,
            'datetime' => null,
            'network' => null,
            'address' => $address,
            'addressTo' => null,
            'addressFrom' => null,
            'tag' => $tag,
            'tagTo' => null,
            'tagFrom' => null,
            'type' => $type,
            'amount' => $amount,
            'currency' => $code,
            'status' => $status,
            'updated' => null,
            'fee' => array(
                'currency' => $code,
                'cost' => $feeCost,
            ),
        );
    }

    public function nonce() {
        return $this->milliseconds();
    }

    public function fetch_status_sync($params = array ()) {
        return Async\async(function () use ($params) {
            /**
             * fetch synchronization time
             * @param {array} $params extra parameters specific to the protondex api endpoint
             * @return {array} a ~@link https://docs.ccxt.com/en/latest/manual.html?#balance-structure balance structure~
             */
            $response = Async\await($this->publicGetStatusSync ());
            //
            //     array(
            //         {
            //           "dbSecondsBehind" => 0,
            //           "chronicleSecondsBehind" => 0,
            //           "maxSecondsBehind" => 0
            //         }
            //     )
            return $response;
        }) ();
    }

    public function fetch_ohlcv(string $symbol, $timeframe = '1W', ?int $since = null, ?int $limit = null, $params = array ()) {
        return Async\async(function () use ($symbol, $timeframe, $since, $limit, $params) {
            /**
             * retrive ohlcv charts
             * @param {int} $timeframe duration of the input
             * @param {string} $symbol unified $market $symbol
             * @param {timestamp} from_time start date and time
             * @param {timestamp} to_time end date and time
             * @param {integer|null} $limit count to fetch
             * @param {array} $params extra parameters specific to the protondex api endpoint
             * @return {[[int]]} A list of candles ordered, open, high, low, close, volume
             */
            Async\await($this->load_markets());
            $market = $this->market($symbol);
            $request = array(
                'interval' => $timeframe,
                'symbol' => $market['symbol'],
            );
            $currentTimestamp = $this->milliseconds();
            $oneMonth = 30 * 24 * 60 * 60 * 1000;
            if ($params['from_time'] !== null) {
                $request['from'] = $this->ymdhms($this->parse_date($params['from_time']));
            } else {
                $startTime = $currentTimestamp - $oneMonth;
                $request['from'] = $this->ymdhms($startTime);
            }
            if ($params['to_time'] !== null) {
                $request['to'] = $this->ymdhms($this->parse_date($params['to_time']));
            } else {
                $request['to'] = $this->ymdhms($currentTimestamp);
            }
            $request['limit'] = ($limit !== null) ? $limit : 100;
            $response = Async\await($this->publicGetChartOhlcv (array_merge($request, $params)));
            //
            //   array(
            //      {
            //           'close' => '0.76',
            //           'count' => '0',
            //           'high' => '0.76',
            //           'low' => '0.76',
            //           'open' => '0.76',
            //           'time' => '1665950400000',
            //           'volume' => '0',
            //           'volume_bid' => '0'
            //       }
            //   )
            $transResults = $this->safe_value($response, 'data', array());
            $results = array();
            for ($i = 0; $i < count($transResults); $i++) {
                $results[] = $this->parse_ohlcv($transResults[$i], $market);
            }
            return $transResults;
        }) ();
    }

    public function digest_suffix_ripemd160($data, string $suffix) {
        $d = new Uint8Array (strlen($data) . strlen($suffix));
        for ($i = 0; $i < count($data); ++$i) {
            $d[$i] = $data[$i];
        }
        for ($i = 0; $i < count($suffix); ++$i) {
            $len = strlen($data) . $i;
            $d[$len] = $suffix->charCodeAt ($i);
        }
        return ripemd160 ($d);
    }

    public function key_to_string($keyData, string $suffix, string $prefix) {
        $digest = new Uint8Array ($this->digest_suffix_ripemd160($keyData, $suffix));
        $whole = new Uint8Array (strlen($keyData) + 4);
        for ($i = 0; $i < count($keyData); ++$i) {
            $whole[$i] = $keyData[$i];
        }
        for ($i = 0; $i < 4; ++$i) {
            $whole[$i . strlen($keyData)] = $digest[$i];
        }
        return $prefix . $this->binary_to_base58($whole);
    }

    public function string_to_key(string $s, float $size, string $suffix) {
        $whole = $this->base58_to_binary($s);
        $data = new Uint8Array ($whole->buffer, 0, strlen($whole) - 4);
        $digest = new Uint8Array ($this->digest_suffix_ripemd160($data, $suffix));
        $digestStatus = ($digest[0] !== $whole[(strlen($whole)) - 4] || $digest[1] !== $whole[(strlen($whole)) - 3]
                             || $digest[2] !== $whole[(strlen($whole)) - 2] || $digest[3] !== $whole[(strlen($whole)) - 1]);
        if ($digestStatus) {
            throw new \Exception("checksum doesn't match");
        }
        return $data;
    }

    public function from_elliptic($ellipticSig) {
        $ellipticSig->recovery = $ellipticSig->recovery || 0;
        $r = numberToBytesBE ($ellipticSig->r, 32);
        $s = numberToBytesBE ($ellipticSig->s, 32);
        $eosioRecoveryParam = 0;
        $eosioRecoveryParam = $ellipticSig->recovery + 27;
        if ($ellipticSig->recovery <= 3) {
            $eosioRecoveryParam += 4;
        }
        $initParams = new Uint8Array (array( $eosioRecoveryParam ));
        $sigData = concatBytes ($initParams, $r, $s);
        return $this->key_to_string($sigData, 'K1', 'SIG_K1_');
    }

    public function get_signatures($transHex) {
        $chainID = '384da888112027f0321850a169f737c33e53b388aad48b5adace4bab97f437e0';
        $sandboxMode = $this->safe_value($this->options, 'sandboxMode', false);
        if ($sandboxMode) {
            $chainID = '71ee83bcf52142d61019d95f9cc5427ba6a0d7ff8accd9e2088ae2abeaf3d3dd';
        }
        $e = secp256k1;
        $signatures = array();
        $initData = new Uint8Array (32);
        $signBuf = concatBytes (hexToBytes ($chainID), $transHex, $initData);
        $digest = $e->CURVE.hash ($signBuf);
        $arrayData = null;
        if ($this->secret.substr (0, 7) === 'PVT_K1_') {
            $arrayData = $this->string_to_key($this->secret.substr (7), 32, 'K1');
        } else {
            $whole = $this->base58_to_binary($this->secret);
            $keyData = new Uint8Array (32);
            for ($i = 0; $i < 32; ++$i) {
                $keyData[$i] = $whole[$i + 1];
            }
            $arrayData = $keyData;
        }
        $rawSignature = $e->sign ($digest, $arrayData);
        $signature = $this->from_elliptic($rawSignature);
        $signatures[] = $signature;
        return $signatures;
    }

    public function set_sandbox_mode($enable) {
        parent::set_sandbox_mode($enable);
        $this->options['sandboxMode'] = $enable;
    }

    public function create_order(string $symbol, $type, string $side, $amount, $price = null, $params = array ()) {
        return Async\async(function () use ($symbol, $type, $side, $amount, $price, $params) {
            /**
             * create a trade order
             * @see https://api-docs.protondex.com/reference/orderscontroller_submitorder
             * @param {string} $symbol unified $symbol of the $market to create an order in
             * @param {string} $type 'market' or 'limit'
             * @param {string} $side 'buy' or 'sell'
             * @param {float} $amount how much of currency you want to trade in units of base currency
             * @param {float|null} $price the $price at which the order is to be fullfilled, in units of the quote currency, ignored in $market orders
             * @param {array} $params extra parameters specific to the protondex api endpoint
             * @return {array} an ~@link https://docs.ccxt.com/#/?id=order-structure order structure~
             */
            Async\await($this->load_markets());
            if ($this->secret === null) {
                throw new ArgumentsRequired('createOrder call requires a secret to be set');
            }
            $market = $this->market($symbol);
            $marketid = intval($market->info.market_id);
            $accountName = $this->safe_string($params, 'account');
            $orderType = intval($type);
            $orderSide = intval($side);
            $orderFillType = $this->safe_value($params, 'filltype');
            $orderAmount = $amount;
            $triggerPrice = $this->safe_value($params, 'triggerprice');
            $referrerName = ($params['referrer'] !== null) ? $params['referrer'] : '';
            $bidTokenPrecision = $this->parse_to_int($market->info.bid_token.precision);
            $askTokenPrecision = $this->parse_to_int($market->info.ask_token.precision);
            $bidTokenCode = (string) $market->info.bid_token.code;
            $askTokenCode = (string) $market->info.ask_token.code;
            $bidTokenContract = (string) $market->info.bid_token.contract;
            $askTokenContract = (string) $market->info.ask_token.contract;
            $quantityText = ($orderSide === 2) ? sprintf('%.' . $bidTokenPrecision . 'f', ($orderAmount) . ' ' . $bidTokenCode) : sprintf('%.' . $askTokenPrecision . 'f', ($orderAmount) . ' ' . $askTokenCode);
            $tokenContract = $orderSide === 2 ? $bidTokenContract : $askTokenContract;
            $bidTotal = ($orderAmount * pow(10, sprintf('%.0f', $bidTokenPrecision)));
            $askTotal = ($orderAmount * pow(10, sprintf('%.0f', $askTokenPrecision)));
            $quantity = ($orderSide === 2) ? (string) $bidTotal : (string) $askTotal;
            $orderPrice = Number ($price) * Number (pow(10, sprintf('%.0f', $askTokenPrecision)));
            $auth = array( 'actor' => $accountName, 'permission' => 'active' );
            $action1 = array(
                'account' => $tokenContract,
                'name' => 'transfer',
                'data' => array(
                    'from' => $accountName,
                    'to' => 'dex',
                    'quantity' => $quantityText,
                    'memo' => '',
                ),
                'authorization' => array( $auth ),
            );
            $action2 = array(
                'account' => 'dex',
                'name' => 'placeorder',
                'data' => array(
                    'market_id' => $marketid,
                    'account' => $accountName,
                    'order_type' => $orderType,
                    'order_side' => $orderSide,
                    'fill_type' => $orderFillType,
                    'bid_symbol' => array(
                        'sym' => $bidTokenPrecision . ',' . $bidTokenCode,
                        'contract' => $bidTokenContract,
                    ),
                    'ask_symbol' => array(
                        'sym' => $askTokenPrecision . ',' . $askTokenCode,
                        'contract' => $askTokenContract,
                    ),
                    'referrer' => $referrerName,
                    'quantity' => $quantity,
                    'price' => $orderPrice,
                    'trigger_price' => $triggerPrice,
                ),
                'authorization' => array( $auth ),
            );
            $action3 = array(
                'account' => 'dex',
                'name' => 'process',
                'data' => array(
                    'q_size' => 20,
                    'show_error_msg' => 0,
                ),
                'authorization' => array( $auth ),
            );
            $actions = array( $action1, $action2, $action3 );
            $request = array(
                'transaction' => array( $actions ),
            );
            $orderDetails = array();
            $retries = 10;
            while ($retries > 0) {
                try {
                    $serResponse = Async\await($this->publicPostOrdersSerialize (array_merge($request)));
                    $result = $this->safe_value($serResponse, 'data', array());
                    $tx = hexToBytes ($result['serialized_tx_hex']);
                    $signatures = $this->get_signatures($tx);
                    $orderRequest = array(
                        'serialized_tx_hex' => 'strval' ($result['serialized_tx_hex']),
                        'signatures' => $signatures,
                    );
                    $response = Async\await($this->publicPostOrdersSubmit (array_merge($orderRequest)));
                    $data = $this->safe_value($response, 'data', array());
                    // Response format
                    // {
                    //     trx_id => 'd6124ed37ba30f499ec3043c185d6e458c7f4a581e09a4f3cefe64c723426af0',
                    //     block_time => '2023-06-16T19:10:30.000Z',
                    //     orders => array(
                    //         {
                    //             ordinal_order_id => '378b28d5164be48adc7c0c7c02a9803abc4109185f11cc6116864e94878ff5cc',
                    //             order_id => '3990837',
                    //             status => 'create'
                    //         }
                    //     )
                    // }
                    $orderDetails['ordinal_order_id'] = $data->orders[0].ordinal_order_id;
                    $orderDetails['order_id'] = $data->orders[0].order_id;
                    $orderDetails['status'] = $data->orders[0].status;
                    $orderDetails['block_time'] = $data['block_time'];
                    $orderDetails['symbol'] = $symbol;
                    $orderDetails['order_type'] = $orderType;
                    $orderDetails['order_side'] = $orderSide;
                    $orderDetails['price'] = $orderPrice;
                    $orderDetails['trigger_price'] = $triggerPrice;
                    $retries = 0;
                } catch (Exception $e) {
                    if ($this->last_json_response) {
                        $message = $this->safe_string($this->last_json_response.error.details[0], 'message');
                        if ($message === 'is_canonical( c ) => signature is not canonical') {
                            --$retries;
                        } else {
                            if ($message === 'assertion failure with $message => overdrawn balance') {
                                throw new InsufficientFunds('- Add funds to the account');
                            }
                            $retries = 0;
                        }
                    }
                    if (!$retries) {
                        throw $e;
                    }
                }
            }
            return $this->parse_order($orderDetails, $market);
        }) ();
    }

    public function cancel_order(string $id, ?string $symbol = null, $params = array ()) {
        return Async\async(function () use ($id, $symbol, $params) {
            /**
             * cancels an open order
             * @param {string} $id order $id
             * @param {string|null} $symbol unified $symbol of the market the order was made in
             * @param {array} $params extra parameters specific to the protondex api endpoint
             * @return {array} An {@link https://docs.ccxt.com/en/latest/manual.html#order-structure order structure}
             */
            Async\await($this->load_markets());
            if ($this->secret === null) {
                throw new ArgumentsRequired('cancelOrder call requires a secret to be set');
            }
            $orderId = intval($id);
            $accountName = $this->safe_string($params, 'account');
            $auth = array( 'actor' => $accountName, 'permission' => 'active' );
            $action1 = array(
                'account' => 'dex',
                'name' => 'cancelorder',
                'data' => array(
                    'account' => $accountName,
                    'order_id' => $orderId,
                ),
                'authorization' => array( $auth ),
            );
            $action2 = array(
                'account' => 'dex',
                'name' => 'withdrawall',
                'data' => array(
                    'account' => $accountName,
                ),
                'authorization' => array( $auth ),
            );
            $actions = array( $action1, $action2 );
            $request = array(
                'transaction' => array( $actions ),
            );
            $data = null;
            $retries = 10;
            while ($retries > 0) {
                try {
                    $serResponse = Async\await($this->publicPostOrdersSerialize (array_merge($request)));
                    $result = $this->safe_value($serResponse, 'data', array());
                    $tx = hexToBytes ($result['serialized_tx_hex']);
                    $signatures = $this->get_signatures($tx);
                    $orderRequest = array(
                        'serialized_tx_hex' => 'strval' ($result['serialized_tx_hex']),
                        'signatures' => $signatures,
                    );
                    $response = Async\await($this->publicPostOrdersSubmit (array_merge($orderRequest)));
                    $data = $this->safe_value($response, 'data', array());
                    $retries = 0;
                } catch (Exception $e) {
                    if ($this->last_json_response) {
                        $message = $this->safe_string($this->last_json_response.error.details[0], 'message');
                        if ($message === 'is_canonical( c ) => signature is not canonical') {
                            --$retries;
                        } else {
                            $retries = 0;
                        }
                    }
                    if (!$retries) {
                        throw $e;
                    }
                }
            }
            return $data;
        }) ();
    }

    public function getorder_ids(string $name, string $symbol) {
        return Async\async(function () use ($name, $symbol) {
            try {
                $cancelList = array();
                $i = 0;
                while ($i > 5) {
                    $ordersList = Async\await($this->fetch_open_orders($symbol, 1, 100, array( 'account' => $name, 'offset' => 100 * $i, 'ordinal_order_ids' => '' )));
                    if (strlen(!$ordersList)) {
                        break;
                    }
                    for ($j = 0; $j < count($ordersList); $j++) {
                        $cancelList[] = $ordersList[$j]['id'];
                    }
                    ++$i;
                }
                return $cancelList;
            } catch (Exception $e) {
                throw new OrderNotFound(' calcelAllOrders() error => order not found');
            }
        }) ();
    }

    public function cancel_all_orders($symbol = null, $params = array ()) {
        return Async\async(function () use ($symbol, $params) {
            /**
             * cancel all open orders
             * @param {string|null} $symbol unified $market $symbol, only orders in the $market of this $symbol are cancelled when $symbol is not null
             * @param {array} $params extra parameters specific to the bittrex api endpoint
             * @return {[array]} a list of ~@link https://docs.ccxt.com/#/?id=order-structure order structures~
             */
            Async\await($this->load_markets());
            $market = $this->market($symbol);
            if ($this->secret === null) {
                throw new ArgumentsRequired('cancelOrder call requires a secret to be set');
            }
            $accountName = $this->safe_string($params, 'account');
            $orderList = Async\await($this->getorder_ids($accountName, $market['symbol']));
            if (strlen(!$orderList)) {
                throw new OrderNotFound(' calcelAllOrders() error => no orders found');
            }
            $actions = array();
            $auth = array( 'actor' => $accountName, 'permission' => 'active' );
            for ($i = 0; $i < count($orderList); $i++) {
                $action = array(
                    'account' => 'dex',
                    'name' => 'cancelorder',
                    'data' => array(
                        'account' => $accountName,
                        'order_id' => $orderList[$i],
                    ),
                    'authorization' => array( $auth ),
                );
                $actions[] = $action;
            }
            $withdrawAction = array(
                'account' => 'dex',
                'name' => 'withdrawall',
                'data' => array(
                    'account' => $accountName,
                ),
                'authorization' => array( $auth ),
            );
            $actions[] = $withdrawAction;
            $request = array(
                'transaction' => array( $actions ),
            );
            $data = null;
            $retries = 10;
            while ($retries > 0) {
                try {
                    $serResponse = Async\await($this->publicPostOrdersSerialize (array_merge($request)));
                    $result = $this->safe_value($serResponse, 'data', array());
                    $tx = hexToBytes ($result['serialized_tx_hex']);
                    $signatures = $this->get_signatures($tx);
                    $orderRequest = array(
                        'serialized_tx_hex' => 'strval' ($result['serialized_tx_hex']),
                        'signatures' => $signatures,
                    );
                    $response = Async\await($this->publicPostOrdersSubmit (array_merge($orderRequest)));
                    $data = $this->safe_value($response, 'data', array());
                    $retries = 0;
                } catch (Exception $e) {
                    if ($this->last_json_response) {
                        $message = $this->safe_string($this->last_json_response.error.details[0], 'message');
                        if ($message === 'is_canonical( c ) => signature is not canonical') {
                            --$retries;
                        } else {
                            $retries = 0;
                        }
                    }
                    if (!$retries) {
                        throw $e;
                    }
                }
            }
            return $data;
        }) ();
    }

    public function sign($path, $api = 'public', $method = 'GET', $params = array (), $headers = null, $body = null) {
        $url = $this->urls['api']['rest'];
        $request = '/' . $this->version . '/' . $this->implode_params($path, $params);
        $query = $this->omit($params, $this->extract_params($path));
        $implodedPath = $this->implode_params($path, $params);
        if ($api === 'public') {
            if (($method === 'POST') || ($method === 'PUT') || ($method === 'DELETE')) {
                if ($query) {
                    $body = $this->json($query);
                }
                $headers = array(
                    'Content-Type' => 'application/json',
                );
            } elseif ($query) {
                $request .= '?' . $this->urlencode($query);
            }
        } else {
            $this->check_required_credentials();
            $timestamp = (string) $this->nonce();
            $auth = $method . "\n"; // eslint-disable-line quotes
            $url .= '/' . $implodedPath;
            $auth .= '/' . $implodedPath;
            if (($method === 'POST') || ($method === 'PUT') || ($method === 'DELETE')) {
                $auth .= "\n"; // eslint-disable-line quotes
                if ($query) {
                    $body = $this->json($query);
                    $auth .= 'requestBody=' . $body . '&';
                }
                $auth .= 'signTimestamp=' . $timestamp;
            } else {
                $sortedQuery = array_merge(array( 'signTimestamp' => $timestamp ), $query);
                $sortedQuery = $this->keysort($sortedQuery);
                $auth .= "\n" . $this->urlencode($sortedQuery); // eslint-disable-line quotes
                if ($query) {
                    $url .= '?' . $this->urlencode($query);
                }
            }
            $signature = $this->hmac($this->encode($auth), $this->encode($this->secret), 'sha256', 'base64');
            $headers = array(
                'Content-Type' => 'application/json',
                'key' => $this->apiKey,
                'signTimestamp' => $timestamp,
                'signature' => $signature,
            );
        }
        $url = $url . $request;
        return array( 'url' => $url, 'method' => $method, 'body' => $body, 'headers' => $headers );
    }

    public function handle_errors($code, $reason, $url, $method, $headers, $body, $response, $requestHeaders, $requestBody) {
        if (!$response) {
            return; // fallback to default $error handler
        }
        $error = $this->safe_value($response, 'error');
        if ($error !== null) {
            $errorCode = $this->safe_string($error, 'code');
            $feedback = $this->id . ' ' . $body;
            $this->throw_exactly_matched_exception($this->exceptions, $errorCode, $feedback);
            throw new ExchangeError($feedback); // unknown message
        }
    }
}
